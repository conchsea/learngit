git init
git add file           if you don't git add,then git commit will not work.
git commit -m "something"     
git diff 
git diff --cached
git status
git log
git reflog


git reset --hard HEAD^
git reset --hard HEAD~0-100...  版本回退


git checkout -- file    把readme.txt文件在工作区的修改全部撤销
这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令.
git reset HEAD file 可以把暂存区的修改撤销掉（unstage），重新放回工作.
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。


ssh-keygen -t rsa -C "youremail@example.com"  
git remote add origin git@github.com:conchsea/learngit.git
git push -u origin master (first do)
git push origin master

git clone git@github.com:conchsea/learngit.git

git config --global user.name "your name"
git config --global user.email "your_email@youremail.com"

git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
Switched to branch 'dev'

git branch命令会列出所有分支，当前分支前面会标一个*号。
git branch -d <name>删除一个分支。
git branch -D <name>强行删除一个没有合并的分支。

git merge命令用于合并指定分支到当前分支。

git merge --no-ff -m "merge with no-ff 

git stash，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。
git stash list 可以查看被隐藏的工作列表。
git stash apply可以恢复工作现场，但是恢复后，stash内容并不删除，你需要用git stash drop来删除。
git stash pop，恢复的同时把stash内容也删了。
git stash apply stash@{0} 可以恢复多个列表的其中之一。

git remote -v 查看远程库信息。

在新的工作目录clone时，只能得到master分支，如果想要其他分支，需要
git checkout -b dev origin/dev 在本地创建和远程分支对应的分支。

**如果在分支中的工作区改变文件而没有添加到暂存区，那么在master中是可以看到文件的改变的。
也就是说任何的修改都是对于工作区文件的修改，而不同的分支只是在add和commmit之后才能看出明显得差异。(个人理解)

git branch --set-upstream dev origin/dev 指定本地dev分支与远程origin/dev分支的链接.

多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。



git tag <name>就可以打一个新标签,默认标签是打在最新提交的commit上的。
git tag v0.9 commit id  可以将标签打到对应的id上。
git tag查看标签.
git show <tagname>查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字，操作如下。
git tag -a v0.1 -m "version 0.1 released" commit 
git push origin <tagname> 推送某个标签到远程.
git push origin --tags 一次性推送全部尚未推送到远程的本地标签
git push origin :refs/tags/v0.9  删除已经推送的远程标签。


忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
